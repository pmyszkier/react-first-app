{"version":3,"sources":["logo.svg","App.js","Car.js","serviceWorker.js","MyAlertButton.js","ClickCounter.js","InputContent.js","DateComponent.js","ShowDate.js","PersonListComponent.js","index.js","registerServiceWorker.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","React","Component","Car","this","props","brand","model","Garage","name","Boolean","window","location","hostname","match","MyButtonComponent","onClick","onClickHandler","alert","ClickCounter","state","counter","totalClicks","totalDoubleClicks","decrement","bind","onDoubleClick","doubleClick","increment","setState","prevState","InputContent","firstName","lastName","class","onChange","inputFirstName","value","inputLastName","e","console","log","DateComponent","date","Date","timerId","setInterval","updateDate","clearInterval","dateStr","toString","ShowDate","dateVisible","clickButtonTimeout","setTimeout","onButtonClick","id","allUsers","PersonListComponent","filteredUsers","text","currentTarget","getFilteredUsersForText","filter","user","toLowerCase","includes","filterUsers","onInput","resetFilteredList","users","UsersList","length","map","key","ReactDOM","render","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error"],"mappings":"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","file":"static/js/main.2100774c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n\r\n// class Car extends React.Component {\r\n//   render() {\r\n//     return <h2>Hi, I am a Car!</h2>;\r\n//   }\r\n// }\r\n\r\n// export default Car;\r\n\r\nclass Car extends React.Component {\r\n  render() {\r\n    return <h2>I am a {this.props.brand.model}!</h2>;\r\n  }\r\n}\r\n\r\n// export default Car;\r\n\r\nclass Garage extends React.Component {\r\n  render() {\r\n    const carinfo = {name: \"Ford\", model: \"Mustang\"};\r\n    return (\r\n      <div>\r\n      <h1>Who lives in my garage?</h1>\r\n      <Car brand={carinfo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Garage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n\r\n// Wg https://typeofweb.com/interakcja-komponentami-react-js/\r\n\r\n// Bez użycia klasy:\r\n// function MyButtonComponent() {\r\n//   return (\r\n//     <button onClick={() => alert('Kliknięto!')}>Kliknij!</button>\r\n//   );\r\n// }\r\n\r\n//lub:\r\n// function onClickHandler() {\r\n//   alert('Kliknięto!');\r\n// }\r\n// function MyButtonComponent() {\r\n//   return (\r\n//     <button onClick={onClickHandler}>Kliknij!</button>\r\n//   );\r\n// }\r\n\r\n// Zamiast tego lepsza klasa:\r\nclass MyButtonComponent extends React.Component {\r\n  render() {\r\n    return <button onClick={this.onClickHandler}>Kliknij!</button>;\r\n  }\r\n  onClickHandler() {\r\n    alert(\"Kliknięto!\");\r\n  }\r\n}\r\n\r\n// Dalej patrz index.js:\r\n// ReactDOM.render(\r\n//   <MyComponent />,\r\n//   document.getElementById('root3')\r\n// );\r\n\r\n// To musi być:\r\nexport default MyButtonComponent ","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n\r\n// Wg https://typeofweb.com/state-react-js/\r\n\r\n// Z użyciem klasy:\r\nclass ClickCounter extends React.Component {\r\n  constructor() {\r\n    super();  // super dajemy wtedy gdy klasa po czymś dziedziczy (czyli ma extends)\r\n    this.state = {counter: 0, totalClicks: 0, totalDoubleClicks: 0};\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>CLICK COUNTER:\r\n        <br></br>\r\n        <button onClick={this.decrement.bind(this)} onDoubleClick={this.doubleClick.bind(this)}>-</button>\r\n        {/* <button onClick={()=>this.decrement()} onDoubleClick={this.doubleClick.bind(this)}>-</button> */}\r\n        <output>{this.state.counter}</output>        \r\n        <button onClick={this.increment.bind(this)} onDoubleClick={this.doubleClick.bind(this)}>+</button>\r\n        <br></br>\r\n        <output>Total clicks: {this.state.totalClicks}</output>\r\n        <br></br>\r\n        <output>Total double clicks: {this.state.totalDoubleClicks}</output>\r\n        <br></br>\r\n        <br></br>\r\n      </div>      \r\n    );\r\n  }\r\n  \r\n  // increment() {\r\n  //   this.setState({\r\n  //     counter: this.state.counter + 1,\r\n  //     totalClicks: this.state.totalClicks + 1\r\n  //   })\r\n  // }\r\n  \r\n  // decrement() {\r\n  //   this.setState({\r\n  //     counter: this.state.counter - 1,\r\n  //     totalClicks: this.state.totalClicks + 1\r\n  //   })\r\n  // }\r\n\r\n  // doubleClick() {\r\n  //   this.setState({\r\n  //     totalDoubleClicks: this.state.totalDoubleClicks + 1\r\n  //   })\r\n  // }\r\n\r\n  // Inny sposób z użyciem tzw. updatera, czyli funkcji prevState (może być inna nazwa) a nie obiektu:\r\n  // Wg:  https://typeofweb.com/state-react-js-2/ \r\n  increment() {\r\n    this.setState(prevState => {  //nazwa prevState może być inna\r\n      return {\r\n        counter: prevState.counter + 1,\r\n        totalClicks: prevState.totalClicks + 1\r\n      };\r\n    });\r\n  }\r\n\r\n  decrement() {\r\n    this.setState(prevState => {\r\n      return {\r\n        counter: prevState.counter - 1,\r\n        totalClicks: prevState.totalClicks + 1\r\n      };\r\n    });\r\n  }\r\n\r\n  doubleClick() {\r\n    this.setState(prevState => {\r\n      return {\r\n        totalDoubleClicks: prevState.totalDoubleClicks + 1,\r\n      };\r\n    });\r\n  }\r\n\r\n}\r\n\r\n// Dalej patrz index.js:\r\n// ReactDOM.render(\r\n//   <ClickCounter />,\r\n//   document.getElementById('root4')\r\n// );\r\n\r\n// To musi być:\r\nexport default ClickCounter ","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n\r\n// Wg https://typeofweb.com/state-react-js/\r\n\r\n// Z użyciem klasy:\r\nclass InputContent extends React.Component {\r\n  constructor() {\r\n    super();  // super dajemy wtedy gdy klasa po czymś dziedziczy (czyli ma extends)\r\n    this.state = {firstName: \"\", lastName: \"\"};\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>INPUT CONTENT:     \r\n        <form>\r\n          Imię: <input class=\"misiek\" onChange={this.inputFirstName.bind(this)} value={this.state.firstName}></input>\r\n          <br></br>\r\n          <output>Wpisano imię: {this.state.firstName}</output>\r\n          <br></br>\r\n          Nazwisko: <input onChange={this.inputLastName.bind(this)} value={this.state.lastName}></input>\r\n          <br></br>\r\n          <output>Wpisano nazwisko: {this.state.lastName}</output>\r\n          <br></br>\r\n          <output>Wpisano imię i nazwisko: {this.state.firstName} {this.state.lastName}</output>\r\n          <br></br>\r\n          <br></br>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n  inputFirstName(e) {\r\n    this.setState( {\r\n        firstName: e.target.value\r\n    });\r\n    console.log(e);\r\n    console.log(e.target);\r\n    console.log(e.target.value)\r\n  }\r\n  inputLastName(e) {\r\n    this.setState( {\r\n        lastName: e.target.value\r\n    });\r\n  }  \r\n\r\n\r\n}\r\n\r\n// Dalej patrz index.js:\r\n// ReactDOM.render(\r\n//   <InputContent />,\r\n//   document.getElementById('root4')\r\n// );\r\n\r\n// To musi być:\r\nexport default InputContent","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n\r\n//import ShowDate from './ShowDate.js';\r\n\r\n//const showDateChild = new ShowDate; // do wywołania metody innego komponentu w tym komponencie\r\n\r\n// Wg https://typeofweb.com/metody-cyklu-zycia-komponentu-react-js/\r\n\r\nclass DateComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: new Date()\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerId = window.setInterval(this.updateDate.bind(this), 1000);\r\n     //alert(\"Interwał\")\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.clearInterval(this.timerId);\r\n    //alert(\"Unmount\")\r\n  }\r\n\r\n  misiek() {\r\n    window.clearInterval(this.timerId);\r\n    alert(\"Unmount1\")\r\n  }\r\n  \r\n  clickAlert() {\r\n    //alert(\"jestem\")\r\n  }\r\n\r\n  updateDate() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const dateStr = this.state.date.toString();\r\n    return <time>{dateStr}</time>;\r\n  }\r\n\r\n  // render() {\r\n  //   if (showButtonAndDateChild.getDateState() == true) {\r\n  //     const dateStr = this.state.date.toString();\r\n  //     return <time>{dateStr}</time>;\r\n  //   } else {\r\n  //     const dateStr = this.state.date.toString();\r\n  //     return <time>{dateStr}</time>;\r\n  //   }   \r\n  // }\r\n\r\n}\r\n\r\n// Dalej patrz index.js:\r\n// ReactDOM.render(\r\n//   <ShowDate />,\r\n//   document.getElementById('root6')\r\n// );\r\n\r\n// To musi być:\r\nexport default DateComponent ","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n\r\nimport DateComponent from './DateComponent.js';\r\n\r\n//const dateComponentChild = new DateComponent; // do wywołania metody innego komponentu w tym komponencie\r\n\r\n// Wg https://typeofweb.com/metody-cyklu-zycia-komponentu-react-js/\r\n\r\nclass ShowDate extends React.Component {\r\n  constructor(props) {  //w tym wypadku może nie być props\r\n    super(props);\r\n\r\n    this.state = { dateVisible: true };\r\n  }\r\n\r\n  // onButtonClick() {\r\n    //// tak było:\r\n  //   this.setState(state => ({ dateVisible: !state.dateVisible }));\r\n  //   // alert(\"Kliknięto\")\r\n  //   alert(this.state);\r\n  // }\r\n\r\n  \r\n\r\n  onButtonClick() {\r\n    \r\n    // DateComponentChild.componentWillUnmount();\r\n    //dateComponentChild.clickAlert();\r\n    this.clickButtonTimeout = setTimeout(() => {\r\n      this.setState(state => ({ dateVisible: !state.dateVisible }));\r\n    }, 5000);\r\n  }\r\n\r\n  // getDateState() {\r\n  //   if (this.state.dateVisible == true) {\r\n  //     return true\r\n  //   } else {\r\n  //     return false\r\n  //   }\r\n  // }\r\n\r\n  onButtonClickSecond() {\r\n    if (this.state.dateVisible === true) {\r\n      // this.clickButtonTimeout = setTimeout(() => {\r\n      //   this.setState(state => ({ dateVisible: !state.dateVisible }));\r\n      // }, 2000);\r\n      alert(\"jest true\")\r\n      //DateComponentChild.misiek();\r\n    } else {\r\n      // this.setState(state => ({ dateVisible: state.dateVisible }));\r\n      alert(\"nie jest true\")\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>SHOW DATE AND DATE COMPONENT:\r\n        <br></br>\r\n        <button onClick={this.onButtonClick.bind(this)}>Kliknij</button>\r\n        <span id=\"date-field\">{this.state.dateVisible && <DateComponent />}</span>\r\n        <br></br>\r\n        <br></br>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//alert(\"React jest super\")\r\n\r\n// Dalej patrz index.js:\r\n// ReactDOM.render(\r\n//   <ShowDate />,\r\n//   document.getElementById('root6')\r\n// );\r\n\r\n// To musi być:\r\nexport default ShowDate ","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n\r\n\r\n// Wg https://typeofweb.com/react-js-w-przykladach-filtrowanie-statycznej-listy/\r\n\r\n// Imiona będziemy pobierać z tablicy allUsers\r\n// w prawdziwej aplikacji pochodziliby z API i/lub byli w Reduksowym storze \r\nconst allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania', 'Asia'];\r\n\r\nclass PersonListComponent extends React.Component {\r\n  constructor() {\r\n    super();    \r\n    \r\n    this.state = {\r\n      filteredUsers: allUsers\r\n    };\r\n  }\r\n\r\n  filterUsers(e) {\r\n    const text = e.currentTarget.value;\r\n    const filteredUsers = this.getFilteredUsersForText(text)\r\n    this.setState({\r\n      filteredUsers\r\n    })\r\n  }\r\n  \r\n  getFilteredUsersForText(text) {\r\n    return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\r\n  }\r\n\r\n  resetFilteredList() {\r\n    return this.filterUsers = \"\"\r\n  }\r\n  \r\n  render () {\r\n    return (\r\n      <div>FILTERED LIST:\r\n        <br></br>\r\n        <input onInput={this.filterUsers.bind(this)} />\r\n        <button onClick={this.state.resetFilteredList}>Resetuj</button>\r\n        <UsersList users={this.state.filteredUsers} />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nconst UsersList = ({ users }) => {\r\n  if (users.length > 0) {\r\n    return (\r\n      <ul>\r\n        {users.map(user => <li key={user}>{user}</li>)}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <p>No results!</p>\r\n  );\r\n};\r\n\r\n// Dalej patrz index.js:\r\n// ReactDOM.render(\r\n//   <PersonListComponent />,\r\n//   document.getElementById('root7')\r\n// );\r\n\r\n// To musi być:\r\nexport default PersonListComponent ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport Car from './Car.js';\r\nimport Garage from './Car.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Pobieram komponenty: \r\nimport MyButtonComponent from './MyAlertButton.js';\r\nimport ClickCounter from './ClickCounter.js';\r\nimport InputContent from './InputContent.js';\r\nimport ShowButtonAndDate from './ShowDate.js';\r\n// import DateComponent from './DateComponent.js'; // to nie tutaj tylko w showDate.js\r\nimport PersonListComponent from './PersonListComponent.js';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nReactDOM.render(<Car />, document.getElementById('root1'));\r\nReactDOM.render(<Garage />, document.getElementById('root2'));\r\n\r\nReactDOM.render(<MyButtonComponent />, document.getElementById('root3'));\r\n// root3-Dalej patrz index.html\r\nReactDOM.render(<ClickCounter />, document.getElementById('root4'));\r\n// root4-Dalej patrz index.html\r\nReactDOM.render(<InputContent />, document.getElementById('root5'));\r\n// root5-Dalej patrz index.html\r\nReactDOM.render(<ShowButtonAndDate />, document.getElementById('root6'));\r\n// root6-Dalej patrz index.html\r\nReactDOM.render(<PersonListComponent />, document.getElementById('root7'));\r\n// root6-Dalej patrz index.html\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.register();\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}"],"sourceRoot":""}